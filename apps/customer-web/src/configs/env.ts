import getConfig from 'next/config';
const {
  publicRuntimeConfig: { app: config, API_PATH },
  serverRuntimeConfig: { API_PATH: INTERNAL_API_PATH, REVALIDATION_SECRET_KEY, PREVIEW_CMS_SECRET_KEY, ROOT_PROJECT },
} = getConfig();

export const globalConfig = {
  env: config.ENVIRONMENT,
  timeout: config.TIME_OUT || 30000,
  domain: config.DOMAIN || '',
  IMAGE_CDN_URL: config.IMAGE_CDN_URL,
  CDN_HOSTNAME: config.CDN_HOSTNAME,
  STATIC_AVATAR_DOMAIN: config.STATIC_AVATAR_DOMAIN,
  GTM_ID: config.GTM_ID,
  GA_MEASUREMENT_ID: config.GA_MEASUREMENT_ID,
  VOUCHER_PRIVATE_KEY: config.VOUCHER_PRIVATE_KEY,
  VOUCHER_IV_KEY: config.VOUCHER_IV_KEY,
  ONE_SIGNAL_APP_ID: config.ONE_SIGNAL_APP_ID,
};

export const serverGlobalConfig = {
  REVALIDATION_SECRET_KEY: REVALIDATION_SECRET_KEY,
  PREVIEW_CMS_SECRET_KEY: PREVIEW_CMS_SECRET_KEY,
  ROOT_PROJECT,
};

export const apiPath: LCConfig.APIPath = {
  FRONT_DOOR: {
    PATH: API_PATH.FRONT_DOOR,
    INTERNAL: INTERNAL_API_PATH?.FRONT_DOOR,
  },
  FRONT_DOOR_V1: {
    PATH: API_PATH.V1_FRONT_DOOR,
    INTERNAL: INTERNAL_API_PATH?.V1_FRONT_DOOR,
  },
  STORE_FRONT: {
    PATH: API_PATH.STORE_FRONT,
    INTERNAL: INTERNAL_API_PATH?.STORE_FRONT,
  },
  SSO: {
    PATH: API_PATH.API_SSO,
    INTERNAL: INTERNAL_API_PATH?.API_SSO,
  },
  CUSTOMER_API: {
    PATH: API_PATH.CUSTOMER_API,
    INTERNAL: INTERNAL_API_PATH?.CUSTOMER_API,
  },
  SEARCH_SERVICE: {
    PATH: API_PATH.SEARCH_SERVICE,
    INTERNAL: INTERNAL_API_PATH?.SEARCH_SERVICE,
  },
  API_CMS: {
    PATH: API_PATH.API_CMS,
    INTERNAL: INTERNAL_API_PATH?.API_CMS,
  },
  IMAGE_CDN_URL: {
    PATH: config.CDN_URL,
    INTERNAL: config.CDN_URL,
  },
  ESTORE: {
    PATH: API_PATH.ESTORE,
    INTERNAL: INTERNAL_API_PATH?.ESTORE,
  },
};
